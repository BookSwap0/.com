// script.js - Final Working Version
import { initializeApp } from "https://www.gstatic.com/firebasejs/9.15.0/firebase-app.js";
import { 
  getFirestore, collection, addDoc, doc, updateDoc, deleteDoc,
  onSnapshot, query, orderBy, getDocs
} from "https://www.gstatic.com/firebasejs/9.15.0/firebase-firestore.js";

// Firebase Configuration
const firebaseConfig = {
  apiKey: "AIzaSyCBg6RQXIiC2BKE2HjzochEeiajc7fBnZA",
  authDomain: "bookswap-bac8b.firebaseapp.com",
  projectId: "bookswap-bac8b",
  storageBucket: "bookswap-bac8b.firebasestorage.app",
  messagingSenderId: "145814837614",
  appId: "1:145814837614:web:7d52eb3c29fe659688097f",
  measurementId: "G-Q33CEMLPZ5"
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

// User Session
let currentUser = sessionStorage.getItem('currentUser') || prompt("Please enter your name:");
sessionStorage.setItem('currentUser', currentUser);

// Book Manager
const BookManager = {
  async saveListing(formData) {
    try {
      const docRef = await addDoc(collection(db, "books"), {
        title: formData.title.trim(),
        author: formData.author.trim(),
        price: parseFloat(formData.price),
        condition: formData.condition,
        location: formData.location.trim(),
        phone: formData.phone.replace(/\D/g, '').slice(0, 10),
        owner: currentUser,
        timestamp: new Date().toISOString()
      });
      return docRef.id;
    } catch (error) {
      alert(`Error saving book: ${error.message}`);
      return null;
    }
  },

  async deleteListing(bookId) {
    try {
      await deleteDoc(doc(db, "books", bookId));
    } catch (error) {
      alert(`Error deleting book: ${error.message}`);
    }
  }
};

// Buy Page Implementation
function initializeBuyPage() {
  const bookGrid = document.getElementById('bookGrid');
  const searchInput = document.getElementById('searchInput');

  // Real-time Listener
  const q = query(collection(db, "books"), orderBy("timestamp", "desc"));
  const unsubscribe = onSnapshot(q, (snapshot) => {
    bookGrid.innerHTML = ''; // Clear existing content
    
    snapshot.forEach((doc) => {
      const book = doc.data();
      bookGrid.innerHTML += `
        <div class="book-card" data-id="${doc.id}">
          <h3>${book.title}</h3>
          <p class="author">By ${book.author}</p>
          <div class="price">‚Çπ${book.price.toFixed(2)}</div>
          <div class="location">üìç ${book.location}</div>
          ${book.owner === currentUser ? `
            <button class="delete-btn" onclick="BookManager.deleteListing('${doc.id}')">
              Delete
            </button>
          ` : ''}
        </div>
      `;
    });
  });

  // Search Functionality
  searchInput.addEventListener('input', async (e) => {
    const searchTerm = e.target.value.toLowerCase();
    const snapshot = await getDocs(collection(db, "books"));
    
    bookGrid.innerHTML = '';
    snapshot.forEach((doc) => {
      const book = doc.data();
      if (book.title.toLowerCase().includes(searchTerm) || 
          book.author.toLowerCase().includes(searchTerm)) {
        bookGrid.innerHTML += `
          <div class="book-card">
            <h3>${book.title}</h3>
            <p class="author">By ${book.author}</p>
            <div class="price">‚Çπ${book.price.toFixed(2)}</div>
          </div>
        `;
      }
    });
  });
}

// Initialize Appropriate Page
document.addEventListener('DOMContentLoaded', () => {
  if (document.getElementById('bookGrid')) {
    initializeBuyPage();
  }
});
